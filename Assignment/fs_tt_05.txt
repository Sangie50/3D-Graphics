#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light1;  
uniform Light light2; 
uniform Light bulb;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  // ambient
  vec3 ambient1 = light1.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;
  vec3 ambient2 = light2.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;
  vec3 ambient3 = bulb.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;

  // diffuse
  vec3 norm = normalize(aNormal);
  
  vec3 lightDir1 = normalize(light1.position - aPos);  
  float diff1 = max(dot(norm, lightDir1), 0.0);
  vec3 diffuse1 = light1.diffuse * (diff1 * material.diffuse) * texture(first_texture, aTexCoord).rgb;

  vec3 lightDir2 = normalize(light2.position - aPos);  
  float diff2 = max(dot(norm, lightDir2), 0.0);
  vec3 diffuse2 = light2.diffuse * (diff2 * material.diffuse) * texture(first_texture, aTexCoord).rgb;

  vec3 lightDir3 = normalize(bulb.position - aPos);  
  float diff3 = max(dot(norm, lightDir3), 0.0);
  vec3 diffuse3 = bulb.diffuse * (diff3 * material.diffuse) * texture(first_texture, aTexCoord).rgb;
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);

  vec3 reflectDir1 = reflect(-lightDir1, norm);  
  float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), material.shininess);
  vec3 specular1 = light1.specular * (spec1 * material.specular);

  vec3 reflectDir2 = reflect(-lightDir2, norm);  
  float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);
  vec3 specular2 = light2.specular * (spec2 * material.specular);

  vec3 reflectDir3 = reflect(-lightDir3, norm);
  float spec3 = pow(max(dot(viewDir, reflectDir3), 0.0), material.shininess);
  vec3 specular3 = bulb.specular * (spec3 * material.specular);

  vec3 a1 = max(ambient1, ambient3);
  vec3 d1 = max(diffuse1, diffuse3);
  vec3 s1 = max(specular1, specular3);

  vec3 result = max(a1, ambient2) + max(d1, diffuse2) + max(s1, specular2);

  fragColor = vec4(result, 1.0);

 
}